import torch
import numpy as np

def most_frequent_class(results, max_num=1):
    """
    results: torch.tensor
    TODO max_num: notes how mush should we return
    """
    counts = np.bincount(results[:, -1])
    return np.argmax(counts)


def generate_subframes(row1, row2):
    frame1, frame2 = int(row1[0]), int(row2[0])
    diff = frame1 - frame2
    if diff == 1:
        return None
    result = torch.zeros((frame2 - frame1 - 1, 8))
    # result[:, -1] = row1[-1]
    step = (row1 - row2) / diff
    for i, frame_n in enumerate(range(frame1 + 1, frame2)):
        result[i] = row1 + (step) * (i + 1)
    return result


def merge_frames(*rows):
    result = torch.zeros((1, 8))
    n = len(rows)
    for row in rows:
        result += row
    return result / n


def the_closest(row_to_compare, rows):

    def dist(row1, row2):
        x11, y11, x12, y12 = row1[1:5]
        x21, y21, x22, y22 = row2[1:5]
        x1, y1 = (x11 + x12) / 2, (y11 + y12) / 2
        x2, y2 = (x21 + x22) / 2, (y21 + y22) / 2
        d = float(((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5)
        print("dist between \n{0} and \n{1}: \n{2}\n".format(row1.tolist(), row2.tolist(), d))
        return d

    m, i = np.infty, 0
    for n, row in enumerate(rows):
        d = dist(row, row_to_compare)
        if d < m:
            m = float(d)
            i = n
    print("humbly returned {}\n".format(rows[i].tolist()))
    return rows[i]


def fullfill(output, num_frames):
    mfc = most_frequent_class(output)
    mfc_data = output[output[:, -1] == float(mfc)]  # only detections with the most frequent class
    result = torch.zeros((num_frames, 8))

    mfc_iter = 0
    res_iter = 0
    while res_iter != num_frames:
        # check1 = mfc_data[row]
        # chekc2 = mfc_data[row + 1]

        if mfc_iter == mfc_data.shape[0] - 1:
            result[res_iter] = mfc_data[mfc_iter]
            mfc_iter += 1
            res_iter += 1
            continue

        # next frame is fulfilled
        if mfc_data[mfc_iter][0] == mfc_data[mfc_iter + 1][0] - 1:
            result[res_iter] = mfc_data[mfc_iter]
            mfc_iter += 1
            res_iter += 1
            continue

        # missing detection on some frames, fill with missing
        if mfc_data[mfc_iter][0] + 1 < mfc_data[mfc_iter + 1][0]:
            subframes = generate_subframes(mfc_data[mfc_iter], mfc_data[mfc_iter + 1])
            result[res_iter] = mfc_data[mfc_iter]
            for subframe in subframes:
                res_iter += 1
                result[res_iter] = subframe
            mfc_iter += 1
            res_iter += 1
            continue

        # this frame contains multiple detections, have to choose one
        if mfc_data[mfc_iter][0] == mfc_data[mfc_iter + 1][0]:
            frame = mfc_data[mfc_iter][0]
            to_cut = mfc_data[mfc_data[:, 0] == frame]
            closest = the_closest(result[res_iter - 1], to_cut)
            result[res_iter] = closest
            mfc_iter += len(to_cut)
            res_iter += 1

            if mfc_iter >= mfc_data.shape[0] - 1:
                break

            # missing detection on some frames, fill with missing
            if mfc_data[mfc_iter - 1][0] + 1 < mfc_data[mfc_iter][0]:
                subframes = generate_subframes(result[res_iter - 1], mfc_data[mfc_iter])
                # result[res_iter] = mfc_data[mfc_iter]
                for subframe in subframes:
                    result[res_iter] = subframe
                    res_iter += 1
            continue
    return result


dirty = torch.tensor([
        [   0.0000,  433.0229,  386.2800,  541.1568,  459.3527,    0.9523,  0.9997,   14.0000], #
        [   1.0000,   74.7861,  387.3137,  154.8855,  502.6845,    0.9914,  0.9997,   14.0000],
        [   1.0000,  189.8172,  361.8867,  315.3370,  500.0613,    0.9831,  0.9998,   14.0000],
        [   1.0000,  439.6299,  383.6940,  544.5637,  466.4047,    0.9822,  0.9998,   14.0000], #
        [   1.0000,  296.6599,  370.6938,  409.6549,  482.3493,    0.9675,  0.9998,   14.0000],
        [   2.0000,   75.0464,  386.4885,  156.0239,  502.9350,    0.9896,  0.9997,   14.0000],
        [   2.0000,  190.5254,  364.6609,  315.7208,  494.2692,    0.9804,  0.9998,   14.0000],
        [   2.0000,  295.1129,  368.0803,  412.2120,  482.9950,    0.9558,  0.9998,   14.0000],
        [   2.0000,  441.9460,  386.0157,  549.7227,  459.4959,    0.8785,  0.9995,   14.0000], #
        [   3.0000,  192.0530,  362.0561,  316.4289,  495.2758,    0.9927,  0.9998,   14.0000],
        [   3.0000,   74.1199,  384.0628,  155.4084,  503.6649,    0.9898,  0.9998,   14.0000],
        [   3.0000,  442.7917,  386.6346,  549.8058,  458.6306,    0.9609,  0.9995,   14.0000], #
        [   3.0000,  298.3966,  367.8195,  412.6046,  481.6035,    0.9467,  0.9997,   14.0000],
        [   4.0000,  191.4047,  362.1261,  317.1580,  498.1435,    0.9925,  0.9998,   14.0000],
        [   4.0000,   73.7597,  384.6784,  155.0496,  502.7711,    0.9847,  0.9997,   14.0000],
        [   4.0000,  297.5124,  369.3315,  411.5422,  481.0149,    0.9511,  0.9998,   14.0000],
        [   4.0000,  442.5784,  386.0711,  547.5917,  458.6378,    0.9014,  0.9994,   14.0000],
        [   5.0000,  190.5084,  361.1609,  317.0565,  496.5539,    0.9925,  0.9998,   14.0000],
        [   5.0000,   73.7592,  385.1185,  154.9331,  505.2439,    0.9901,  0.9997,   14.0000],
        [   5.0000,  299.1608,  368.9015,  411.6720,  480.8578,    0.9573,  0.9998,   14.0000],
        [   5.0000,  443.3336,  386.0645,  547.8790,  458.6671,    0.8783,  0.9995,   14.0000],
        [   6.0000,  191.1779,  364.2160,  316.6104,  492.9948,    0.9924,  0.9998,   14.0000],
        [   6.0000,   73.1932,  382.4025,  155.1189,  502.8587,    0.9809,  0.9997,   14.0000],
        [   6.0000,  443.0150,  386.2267,  550.0050,  458.0763,    0.9614,  0.9998,   14.0000],
        [   6.0000,  301.4362,  369.2697,  411.8889,  477.9500,    0.9444,  0.9997,   14.0000],
        [   7.0000,  632.8101,  243.0841,  736.3497,  487.1681,    0.9986,  1.0000,    0.0000],
        [   7.0000,  709.3667,  220.6166,  850.0359,  479.8492,    0.9903,  0.9996,    0.0000],
        [   7.0000,  192.2797,  361.3135,  317.4757,  497.0934,    0.9939,
            0.9998,   14.0000],
        [   7.0000,   72.9623,  382.6180,  155.6110,  500.2369,    0.9807,
            0.9997,   14.0000],
        [   7.0000,  303.9157,  367.5145,  414.7739,  478.7733,    0.9658,
            0.9998,   14.0000],
        [   7.0000,  446.3599,  385.7187,  548.4871,  457.5180,    0.9185,
            0.9997,   14.0000],
        [   8.0000,  633.5650,  241.8009,  736.6464,  487.0505,    0.9982,
            0.9999,    0.0000],
        [   8.0000,  710.0303,  221.0783,  849.6868,  479.3207,    0.9872,
            0.9993,    0.0000],
        [   8.0000,  193.0336,  361.0609,  317.4544,  496.0078,    0.9956,
            0.9998,   14.0000],
        [   8.0000,   67.7566,  382.8081,  145.2976,  500.1679,    0.9845,
            0.9991,   14.0000],
        [   8.0000,  307.0554,  366.1187,  415.5389,  478.1705,    0.9810,
            0.9998,   14.0000],
        [   8.0000,  448.6700,  385.1165,  547.1382,  462.5304,    0.9593,
            0.9998,   14.0000],
        [   9.0000,  635.3273,  242.9872,  736.2784,  486.9973,    0.9985,
            1.0000,    0.0000],
        [   9.0000,  710.1127,  221.8778,  849.7081,  478.3786,    0.9875,
            0.9993,    0.0000],
        [   9.0000,  193.5095,  362.3313,  317.7256,  494.8254,    0.9947,
            0.9999,   14.0000],
        [   9.0000,   67.8908,  382.5240,  145.1278,  497.4358,    0.9831,
            0.9991,   14.0000],
        [   9.0000,  307.7293,  360.6528,  417.0309,  465.6435,    0.9801,
            0.9998,   14.0000],
        [   9.0000,  449.8036,  388.4930,  553.3578,  456.3962,    0.9658,
            0.9978,   14.0000],
        [  10.0000,  635.2650,  243.1515,  736.7521,  486.9727,    0.9986,
            1.0000,    0.0000],
        [  10.0000,  709.6352,  221.1213,  850.1520,  478.9369,    0.9897,
            0.9995,    0.0000],
        [  10.0000,  194.0871,  361.4011,  316.6459,  496.5781,    0.9963,
            0.9998,   14.0000],
        [  10.0000,   74.0716,  383.7497,  154.6971,  496.9402,    0.9854,
            0.9997,   14.0000],
        [  10.0000,  452.5383,  387.3726,  552.0770,  458.6403,    0.9765,
            0.9972,   14.0000],
        [  10.0000,  308.2387,  360.9471,  417.3997,  464.8890,    0.9753,
            0.9998,   14.0000],
        [  11.0000,  635.2462,  243.5725,  737.8312,  485.6809,    0.9985,
            1.0000,    0.0000],
        [  11.0000,  697.0101,  220.4102,  840.5229,  481.5598,    0.9911,
            0.9998,    0.0000],
        [  11.0000,  202.6188,  365.1952,  321.8262,  499.7406,    0.9958,
            0.9999,   14.0000],
        [  11.0000,  315.9790,  356.6587,  428.6206,  467.7742,    0.9915,
            0.9997,   14.0000],
        [  11.0000,   76.6531,  386.1355,  153.2455,  497.3251,    0.9791,
            0.9996,   14.0000],
        [  11.0000,  456.6209,  386.8685,  555.5217,  458.5546,    0.9693,
            0.9976,   14.0000],
        [  12.0000,  636.2891,  242.6983,  737.4286,  485.9828,    0.9984,
            1.0000,    0.0000],
        [  12.0000,  697.8610,  219.8149,  840.0051,  481.7832,    0.9913,
            0.9997,    0.0000],
        [  12.0000,  194.4266,  360.9052,  317.0182,  498.5319,    0.9964,
            0.9998,   14.0000],
        [  12.0000,  314.1761,  358.9194,  431.4895,  466.6082,    0.9963,
            0.9995,   14.0000],
        [  12.0000,   77.9870,  387.4255,  151.6523,  493.5474,    0.9796,
            0.9992,   14.0000],
        [  12.0000,  462.7127,  384.7940,  555.1935,  459.1537,    0.9761,
            0.9969,   14.0000],
        [  13.0000,  636.0500,  243.4102,  738.3685,  486.4884,    0.9984,
            1.0000,    0.0000],
        [  13.0000,  709.1675,  221.8391,  850.3257,  479.0056,    0.9929,
            0.9994,    0.0000],
        [  13.0000,  317.7558,  360.5965,  431.1912,  464.3084,    0.9975,
            0.9997,   14.0000],
        [  13.0000,  202.6760,  363.7298,  321.0530,  502.6760,    0.9972,
            0.9999,   14.0000],
        [  13.0000,   66.7414,  384.5240,  147.1043,  498.8324,    0.9803,
            0.9993,   14.0000],
        [  13.0000,  466.9227,  385.8067,  556.2910,  462.6593,    0.9783,
            0.9983,   14.0000],
        [  14.0000,  635.3641,  245.2530,  738.3339,  486.5303,    0.9981,
            0.9999,    0.0000],
        [  14.0000,  697.5992,  219.9756,  841.7867,  482.1572,    0.9937,
            0.9998,    0.0000],
        [  14.0000,  202.2901,  359.5826,  321.7478,  499.7000,    0.9986,
            0.9999,   14.0000],
        [  14.0000,  316.0612,  365.5762,  430.0235,  476.4876,    0.9952,
            0.9995,   14.0000],
        [  14.0000,  468.6937,  384.5952,  569.1829,  458.6768,    0.9811,
            0.9981,   14.0000],
        [  14.0000,   65.5243,  385.0101,  147.8953,  501.7159,    0.9810,
            0.9995,   14.0000],
        [  15.0000,  634.8825,  245.6134,  738.8207,  485.2272,    0.9980,
            1.0000,    0.0000],
        [  15.0000,  709.4422,  221.3151,  850.4750,  481.0421,    0.9930,
            0.9996,    0.0000],
        [  15.0000,  201.4719,  362.4232,  323.1445,  501.4869,    0.9981,
            0.9999,   14.0000],
        [  15.0000,  318.0042,  363.5552,  436.7403,  462.5808,    0.9944,
            0.9993,   14.0000],
        [  15.0000,  473.4314,  386.9046,  576.6798,  460.2478,    0.9927,
            0.9996,   14.0000],
        [  15.0000,   64.3954,  384.9877,  149.0811,  503.9583,    0.9757,
            0.9995,   14.0000],
        [  16.0000,  634.1735,  244.0607,  739.1569,  484.8740,    0.9982,
            1.0000,    0.0000],
        [  16.0000,  709.2097,  221.6573,  850.3323,  480.0829,    0.9932,
            0.9997,    0.0000],
        [  16.0000,  201.4715,  364.2863,  322.6349,  502.0629,    0.9977,
            0.9999,   14.0000],
        [  16.0000,  476.9964,  384.8143,  581.1652,  466.9893,    0.9971,
            0.9994,   14.0000],
        [  16.0000,  314.7187,  373.8707,  444.4228,  470.3400,    0.9871,
            0.9993,   14.0000],
        [  16.0000,   62.4176,  383.5551,  149.5614,  535.1471,    0.9502,
            0.9971,   14.0000],
        [  17.0000,  635.6948,  244.0734,  737.4134,  487.7376,    0.9984,
            1.0000,    0.0000],
        [  17.0000,  708.8411,  221.9279,  851.0195,  480.2450,    0.9935,
            0.9995,    0.0000],
        [  17.0000,  201.8447,  364.2544,  323.1852,  499.2965,    0.9983,
            0.9999,   14.0000],
        [  17.0000,  479.5388,  386.8449,  586.5233,  460.8926,    0.9939,
            0.9996,   14.0000],
        [  17.0000,  314.0351,  376.0617,  449.0991,  466.9283,    0.9860,
            0.9994,   14.0000],
        [  17.0000,   61.7351,  382.4108,  148.8275,  535.4284,    0.9430,
            0.9973,   14.0000],
        [  18.0000,  634.7245,  243.7617,  737.9324,  486.0544,    0.9981,
            0.9999,    0.0000],
        [  18.0000,  709.0749,  223.2113,  850.6685,  479.5865,    0.9920,
            0.9995,    0.0000],
        [  18.0000,  201.6298,  364.5733,  323.1800,  502.8959,    0.9974,
            0.9999,   14.0000],
        [  18.0000,  484.5808,  384.5663,  588.9247,  462.0771,    0.9956,
            0.9997,   14.0000],
        [  18.0000,  319.5889,  375.9313,  442.5766,  472.9551,    0.9834,
            0.9996,   14.0000],
        [  18.0000,   61.4578,  384.5510,  149.5783,  534.1240,    0.9200,
            0.9953,   14.0000]])

clean = fullfill(dirty, 19)
